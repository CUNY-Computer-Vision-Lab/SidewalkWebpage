# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET   /                                                                 @controllers.AuditController.audit
POST  /                                                                 controllers.TeaserController.teaserPost

GET   /home                                                             @controllers.AuditController.audit
GET   /about                                                            @controllers.ApplicationController.about
GET   /api                                                              @controllers.ApplicationController.developer
GET   /developer                                                        @controllers.ApplicationController.developer
GET   /terms                                                            @controllers.ApplicationController.terms
GET   /demo                                                             @controllers.ApplicationController.demo
GET   /results                                                          @controllers.ApplicationController.results
GET   /faq                                                              @controllers.ApplicationController.faq
GET   /student                                                          @controllers.ApplicationController.student
GET   /mobile                                                           @controllers.ApplicationController.mobile
GET   /clustering                                                       @controllers.ClusteringSessionController.index
GET   /irr                                                              @controllers.IRRController.index
GET   /accuracy                                                         @controllers.AccuracyCalculationController.index

# Auditing tasks
GET   /audit                                                            @controllers.AuditController.audit
GET   /auditCondition                                                   @controllers.AuditController.auditCondition
GET   /turkerAuditCondition                                             @controllers.AuditController.turkerAuditCondition
GET   /audit/region/:id                                                 @controllers.AuditController.auditRegion(id: Int)
GET   /audit/street/:id                                                 @controllers.AuditController.auditStreet(id: Int)
POST  /audit/comment                                                    @controllers.AuditController.postComment
POST  /audit/amtAssignment                                              @controllers.AuditController.postAMTAssignment
POST  /audit/nostreetview                                               @controllers.AuditController.postNoStreetView

# User authentication
GET   /signIn                                                           @controllers.UserController.signIn(url: String ?= "/")
GET   /signUp                                                           @controllers.UserController.signUp(url: String ?= "/")
GET   /signOut                                                          @controllers.UserController.signOut(url: String ?="/")
POST  /signUp                                                           @controllers.SignUpController.signUp(url: String ?= "/")
POST  /authenticate/credentials                                         @controllers.CredentialsAuthController.authenticate(url: String ?= "/")
POST  /authapi/authenticate                                             @controllers.CredentialsAuthController.postAuthenticate
POST  /authapi/signup                                                   @controllers.SignUpController.postSignUp

# Admin
GET   /admin                                                            @controllers.AdminController.index
GET   /admin/user/:username                                             @controllers.AdminController.userProfile(username: String)
GET   /admin/task/:taskId                                               @controllers.AdminController.task(taskId: Int)

GET   /adminapi/missionsCompletedByUsers                                @controllers.AdminController.getMissionsCompletedByUsers
GET   /adminapi/neighborhoodCompletionRate                              @controllers.AdminController.getNeighborhoodCompletionRate
GET   /adminapi/anonUserMissionCounts                                   @controllers.AdminController.getAllAnonUserCompletedMissionCounts
GET   /adminapi/allSignInCounts                                         @controllers.AdminController.getAllUserSignInCounts
GET   /adminapi/completionRateByDate                                    @controllers.AdminController.getCompletionRateByDate
GET   /adminapi/tasks/:username                                         @controllers.AdminController.getSubmittedTasksWithLabels(username: String)
GET   /adminapi/interactions/:username                                  @controllers.AdminController.getAuditTaskInteractionsOfAUser(username: String)
GET   /adminapi/onboardingInteractions                                  @controllers.AdminController.getOnboardingTaskInteractions
GET   /adminapi/auditpath/:id                                           @controllers.AdminController.getAnAuditTaskPath(id: Int)
GET   /adminapi/auditedStreets/:username                                @controllers.AdminController.getStreetsAuditedByAUser(username: String)
GET   /adminapi/labelLocations/:username                                @controllers.AdminController.getLabelsCollectedByAUser(username: String)
GET   /adminapi/labels/all                                              @controllers.AdminController.getAllLabels
GET   /adminapi/labels/panoid                                           @controllers.AdminController.getAllPanoIds
GET   /adminapi/label/:labelId                                          @controllers.AdminController.getLabelData(labelId: Int)
GET   /adminapi/labelCounts/registered                                  @controllers.AdminController.getAllRegisteredUserLabelCounts
GET   /adminapi/labelCounts/anonymous                                   @controllers.AdminController.getAllAnonUserLabelCounts

GET   /adminapi/webpageActivity                                         @controllers.AdminController.getAllWebpageActivities
GET   /adminapi/webpageActivity/:activity                               @controllers.AdminController.getWebpageActivities(activity: String)
GET   /adminapi/webpageActivity/:activity/*keyValPairs                  @controllers.AdminController.getWebpageActivitiesKeyVal(activity: String, keyValPairs: String)
GET   /adminapi/numWebpageActivity/:activity                            @controllers.AdminController.getNumWebpageActivities(activity: String)
GET   /adminapi/numWebpageActivity/:activity/*keyValPairs               @controllers.AdminController.getNumWebpageActivitiesKeyVal(activity: String, keyValPairs: String)

GET   /adminapi/choroplethCounts                                        @controllers.AdminController.getRegionNegativeLabelCounts

# Task API.
GET   /task                                                             @controllers.TaskController.getTask
GET   /task/street/:id                                                  @controllers.TaskController.getTaskByStreetEdgeId(id: Int)
GET   /tasks/route/:id                                                  @controllers.TaskController.getTasksOnARoute(id: Int)
GET   /tasks                                                            @controllers.TaskController.getTasksInARegion(regionId: Int)
POST  /task                                                             @controllers.TaskController.post

# Route API
POST  /route                                                            @controllers.RouteController.post
GET   /route/:id                                                        @controllers.RouteController.getRouteById(id: Int)
GET   /routes/:id                                                       @controllers.RouteController.getStreetsOnARoute(id: Int)

# Missions
GET   /missionturk                                                      @controllers.MissionController.getMTurkMissions
GET   /missionturk/:turkerId                                            @controllers.MissionController.getMTurkMissionsByTurker(turkerId: String)
GET   /mission                                                          @controllers.MissionController.getMissions
POST  /mission                                                          @controllers.MissionController.post

# Labels
GET   /label/currentMission                                             @controllers.LabelController.getLabelsFromCurrentMission(regionId: Int)

# Neighborhoods
GET   /neighborhoods                                                    @controllers.RegionController.listNeighborhoods
POST  /neighborhood/assignment                                          @controllers.RegionController.setANewRegion

# Map Edit
GET   /map/edit                                                         @controllers.MapController.edit

# User status
# /:username has to come last in the list. Otherwise it eats other urls.
GET   /contribution/streets                                             @controllers.UserProfileController.getAuditedStreets
GET   /contribution/streets/all                                         @controllers.UserProfileController.getAllAuditedStreets
GET   /contribution/tasks                                               @controllers.UserProfileController.getSubmittedTasksWithLabels
GET   /contribution/auditCounts                                         @controllers.UserProfileController.getAuditCounts
GET   /contribution/auditCounts/all                                     @controllers.UserProfileController.getAllAuditCounts
GET   /contribution/auditInteractions                                   @controllers.UserProfileController.getInteractions
GET   /contribution/previousAudit                                       @controllers.UserProfileController.previousAudit
GET   /contribution/:username                                           @controllers.UserProfileController.userProfile(username: String)

GET   /userapi/labels                                                   @controllers.UserProfileController.getSubmittedLabels(regionId: Option[Int] ?= None)
GET   /userapi/labelCounts/all                                          @controllers.UserProfileController.getAllLabelCounts
GET   /userapi/completedMissionCounts/all                               @controllers.UserProfileController.getAllUserCompletedMissionCounts

POST  /userapi/logWebpageActivity                                       @controllers.UserController.logWebpageActivity

# Geometry API

# Access Feature and Access Score APIs
GET   /v1/access/features                                               @controllers.ProjectSidewalkAPIController.getAccessFeatures(lat1: Double, lng1: Double, lat2: Double, lng2: Double)
GET   /v1/access/score/neighborhoods                                    @controllers.ProjectSidewalkAPIController.getAccessScoreNeighborhoods(lat1: Double, lng1: Double, lat2: Double, lng2: Double)
GET   /v1/access/score/streets                                          @controllers.ProjectSidewalkAPIController.getAccessScoreStreets(lat1: Double, lng1: Double, lat2: Double, lng2: Double)

# Map static resources from the /public folder to the /assets URL path
GET   /assets/*file                                                     controllers.Assets.at(path="/public", file)
GET   /webjars/*file                                                    controllers.WebJarAssets.at(file)


# Ground truth related
GET   /gtresolution                                                     @controllers.GroundTruthResolutionController.index
GET   /gtresolution/labelData/:labelId                                  @controllers.GroundTruthResolutionController.getLabelData(labelId: Int)
POST  /gtresolution/results                                             @controllers.GroundTruthResolutionController.postGroundTruthResults
GET   /gtlabels                                                         @controllers.GTLabelController.getAllGTLabels
GET   /labelsForGtResolution/:sessionId                                 @controllers.ClusteringSessionController.getLabelsForGtResolution(sessionId)
GET   /labelsForGTFixSeverity/:conditionId                              @controllers.GroundTruthResolutionController.getLabelsForGTSeverityFix(conditionId)

# Clustering session end points
GET   /clusteringsessions                                               @controllers.ClusteringSessionController.getClusteringSessionsWithoutDeleted
GET   /clusterRoute/:routeId/:hitId                                     @controllers.ClusteringSessionController.runClustering(routeId: Int, hitId: String)
GET   /clusterUser/:userId                                              @controllers.ClusteringSessionController.runUserClustering(userId: String)
# GETS used by the label_clustering.py file
GET   /labelsToCluster/:routeId/:hitId                                  @controllers.ClusteringSessionController.getLabelsToCluster(routeId, hitId)
GET   /userLabelsToCluster/:userId                                      @controllers.ClusteringSessionController.getUserLabelsToCluster(userId)
GET   /volunteerLabelsToCluster/:routeId                                @controllers.ClusteringSessionController.getVolunteerLabelsToClusterForRoute(routeId: Int)
GET   /nonGTLabelsToCluster/:routeId/:n                                 @controllers.ClusteringSessionController.getTurkerLabelsToCluster(routeId, n)
GET   /singleTurkerLabels/:turkerId/:routeId                            @controllers.ClusteringSessionController.getSingleTurkerLabelsToCluster(turkerId, routeId: Int)
GET   /clusteredTurkerLabels/:sessionIds                                @controllers.AccuracyCalculationController.getClusteredTurkerLabelsToCluster(sessionIds, routeId: Option[Int] ?= None)
# POSTS used by the label_clustering.py file
POST  /clusteringResults/:routeId/:threshold                            @controllers.ClusteringSessionController.postClusteringResults(routeId, threshold, fromClusters: Option[Boolean] ?= None)
POST  /singleUserClusteringResults                                      @controllers.ClusteringSessionController.postSingleUserClusteringResults(volunteerOrTurkerId: String, threshold: Double, routeId: Option[Int] ?= None)

# IRR Related
GET   /getIRRData/:hitId/:routeId                                       @controllers.IRRController.getDataForIRR(hitId: String, routeId: Int)
POST  /getIRRDataForHits                                                @controllers.IRRController.getDataForIRRForHits

# Accuracy calculation related
GET   /accuracyData/:workerType/:clusterNum                             @controllers.AccuracyCalculationController.getAccuracyData(workerType, clusterNum)
GET   /accuracyDataWithSinglePersonClust/:workerType/:clusterNum        @controllers.AccuracyCalculationController.getAccuracyDataWithSinglePersonClustering(workerType, clusterNum)
GET   /accuracyForEachTurker                                            @controllers.AccuracyCalculationController.getAccuracyForEachTurker()
